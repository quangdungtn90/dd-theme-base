@function map-set($map, $keys, $value) {
    $maps: ($map,);
    $result: null;

    // If the last key is a map already
    // Warn the user we will be overriding it with $value
    @if type-of(nth($keys, -1)) == map {
        @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
    }

    // If $keys is a single key
    // Just merge and return
    @if length($keys) == 1 {
        @return map-merge($map, ($keys: $value));
    }

    // Loop from the first to the second to last key from $keys
    // Store the associated map to this key in the $maps list
    // If the key doesn't exist, throw an error
    @for $i from 1 through length($keys) - 1 {
        $current-key: nth($keys, $i);
        $current-map: nth($maps, -1);
        $current-get: map-get($current-map, $current-key);
        @if $current-get == null {
            @warn "Key `#{$key}` doesn't exist at current level in map.";
            @return false;
        }
        $maps: append($maps, $current-get);
    }

    // Loop from the last map to the first one
    // Merge it with the previous one
    @for $i from length($maps) through 1 {
        $current-map: nth($maps, $i);
        $current-key: nth($keys, $i);
        $current-val: if($i == length($maps), $value, $result);
        $result: map-merge($current-map, ($current-key: $current-val));
    }

    // Return result
    @return $result;
}

// margin and padding values
$s : 1;
$space-values : ();
@for $i from 0 through 150 {
    $space-values: map-set($space-values,$i,$s*$i);

}

// margin and padding shorthands
// change these values if its not imported into bootstrap
$grid-breakpoints-custom: (
    // Extra small screen / phone
        xs: 0,
    // Small screen / phone
        sm: 576px,
    // Medium screen / tablet
        md: 768px,
    // Large screen / desktop
        lg: 992px,
    // Extra large screen / wide desktop
        xl: 1200px
);
$breakpoints : $grid-breakpoints-custom;

$h : height;

// main function definition
@mixin make-space($values, $breakpoints) {
    @each $breakpoint-name, $breakpoint-value in $breakpoints {
        @if($breakpoint-value == 0) {
                @each $key, $value in $values {
                    .#{$h}-#{$breakpoint-name}-#{$value} {
                        #{$h}: #{$value}#{'px'};

                    }
                }
        }
        @else {
            @media screen and (min-width: $breakpoint-value) {
                    @each $key, $value in $values {
                        .#{$h}-#{$breakpoint-name}-#{$value} {
                            #{$h}: #{$value}#{'px'};
                        }
                    }
            }
        }
    }
}
@include make-space($space-values,$breakpoints);
